// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppGSL.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// log_sum_exp
double log_sum_exp(const arma::vec& x);
RcppExport SEXP _CAPPMx_log_sum_exp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(log_sum_exp(x));
    return rcpp_result_gen;
END_RCPP
}
// sanity
void sanity(arma::uvec x);
RcppExport SEXP _CAPPMx_sanity(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type x(xSEXP);
    sanity(x);
    return R_NilValue;
END_RCPP
}
// mixture_cat
Rcpp::List mixture_cat(const double alpha, const unsigned nmix, arma::uvec ncat, int nrun, int burn, int thin, arma::umat eta1, arma::umat eta2, Rcpp::List non_na_obs1, arma::uvec del1, arma::uvec del2);
RcppExport SEXP _CAPPMx_mixture_cat(SEXP alphaSEXP, SEXP nmixSEXP, SEXP ncatSEXP, SEXP nrunSEXP, SEXP burnSEXP, SEXP thinSEXP, SEXP eta1SEXP, SEXP eta2SEXP, SEXP non_na_obs1SEXP, SEXP del1SEXP, SEXP del2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const unsigned >::type nmix(nmixSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ncat(ncatSEXP);
    Rcpp::traits::input_parameter< int >::type nrun(nrunSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type eta1(eta1SEXP);
    Rcpp::traits::input_parameter< arma::umat >::type eta2(eta2SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type non_na_obs1(non_na_obs1SEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type del1(del1SEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type del2(del2SEXP);
    rcpp_result_gen = Rcpp::wrap(mixture_cat(alpha, nmix, ncat, nrun, burn, thin, eta1, eta2, non_na_obs1, del1, del2));
    return rcpp_result_gen;
END_RCPP
}
// common_atoms_cat
Rcpp::List common_atoms_cat(const double alpha, const unsigned nmix, arma::uvec ncat, const double aa, const double ba, const double al, const double bl, int nrun, int burn, int thin, arma::umat eta1, arma::umat eta2, arma::vec st1, arma::uvec nu1, arma::vec st2, arma::uvec nu2, Rcpp::List non_na_obs1, arma::uvec del1, arma::uvec del2, double tau);
RcppExport SEXP _CAPPMx_common_atoms_cat(SEXP alphaSEXP, SEXP nmixSEXP, SEXP ncatSEXP, SEXP aaSEXP, SEXP baSEXP, SEXP alSEXP, SEXP blSEXP, SEXP nrunSEXP, SEXP burnSEXP, SEXP thinSEXP, SEXP eta1SEXP, SEXP eta2SEXP, SEXP st1SEXP, SEXP nu1SEXP, SEXP st2SEXP, SEXP nu2SEXP, SEXP non_na_obs1SEXP, SEXP del1SEXP, SEXP del2SEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const unsigned >::type nmix(nmixSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ncat(ncatSEXP);
    Rcpp::traits::input_parameter< const double >::type aa(aaSEXP);
    Rcpp::traits::input_parameter< const double >::type ba(baSEXP);
    Rcpp::traits::input_parameter< const double >::type al(alSEXP);
    Rcpp::traits::input_parameter< const double >::type bl(blSEXP);
    Rcpp::traits::input_parameter< int >::type nrun(nrunSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type eta1(eta1SEXP);
    Rcpp::traits::input_parameter< arma::umat >::type eta2(eta2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type st1(st1SEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type nu1(nu1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type st2(st2SEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type nu2(nu2SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type non_na_obs1(non_na_obs1SEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type del1(del1SEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type del2(del2SEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(common_atoms_cat(alpha, nmix, ncat, aa, ba, al, bl, nrun, burn, thin, eta1, eta2, st1, nu1, st2, nu2, non_na_obs1, del1, del2, tau));
    return rcpp_result_gen;
END_RCPP
}
// common_atoms_cat_lognormal
Rcpp::List common_atoms_cat_lognormal(const unsigned nmix, arma::uvec ncat, const double a0, const double df0, const double mu_m, const double mu_v, const double b_m, const double b_v, const int nrun, const int burn, const int thin, arma::umat eta1, arma::umat eta2, arma::mat eta_cont1, arma::mat eta_cont2, arma::vec st1, arma::uvec nu1, arma::vec st2, arma::uvec nu2, Rcpp::List non_na_obs1, Rcpp::List non_na_obs1_cont, arma::uvec del1, arma::uvec del2, const arma::vec& del_range_lognorm, const unsigned nleapfrog_lognorm, const arma::vec& alpha_hyper, const arma::vec& del_range_alp1, const unsigned nleapfrog_alp1, const arma::vec& del_range_alp2, const unsigned nleapfrog_alp2);
RcppExport SEXP _CAPPMx_common_atoms_cat_lognormal(SEXP nmixSEXP, SEXP ncatSEXP, SEXP a0SEXP, SEXP df0SEXP, SEXP mu_mSEXP, SEXP mu_vSEXP, SEXP b_mSEXP, SEXP b_vSEXP, SEXP nrunSEXP, SEXP burnSEXP, SEXP thinSEXP, SEXP eta1SEXP, SEXP eta2SEXP, SEXP eta_cont1SEXP, SEXP eta_cont2SEXP, SEXP st1SEXP, SEXP nu1SEXP, SEXP st2SEXP, SEXP nu2SEXP, SEXP non_na_obs1SEXP, SEXP non_na_obs1_contSEXP, SEXP del1SEXP, SEXP del2SEXP, SEXP del_range_lognormSEXP, SEXP nleapfrog_lognormSEXP, SEXP alpha_hyperSEXP, SEXP del_range_alp1SEXP, SEXP nleapfrog_alp1SEXP, SEXP del_range_alp2SEXP, SEXP nleapfrog_alp2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned >::type nmix(nmixSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ncat(ncatSEXP);
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type df0(df0SEXP);
    Rcpp::traits::input_parameter< const double >::type mu_m(mu_mSEXP);
    Rcpp::traits::input_parameter< const double >::type mu_v(mu_vSEXP);
    Rcpp::traits::input_parameter< const double >::type b_m(b_mSEXP);
    Rcpp::traits::input_parameter< const double >::type b_v(b_vSEXP);
    Rcpp::traits::input_parameter< const int >::type nrun(nrunSEXP);
    Rcpp::traits::input_parameter< const int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< const int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type eta1(eta1SEXP);
    Rcpp::traits::input_parameter< arma::umat >::type eta2(eta2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type eta_cont1(eta_cont1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type eta_cont2(eta_cont2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type st1(st1SEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type nu1(nu1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type st2(st2SEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type nu2(nu2SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type non_na_obs1(non_na_obs1SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type non_na_obs1_cont(non_na_obs1_contSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type del1(del1SEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type del2(del2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type del_range_lognorm(del_range_lognormSEXP);
    Rcpp::traits::input_parameter< const unsigned >::type nleapfrog_lognorm(nleapfrog_lognormSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha_hyper(alpha_hyperSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type del_range_alp1(del_range_alp1SEXP);
    Rcpp::traits::input_parameter< const unsigned >::type nleapfrog_alp1(nleapfrog_alp1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type del_range_alp2(del_range_alp2SEXP);
    Rcpp::traits::input_parameter< const unsigned >::type nleapfrog_alp2(nleapfrog_alp2SEXP);
    rcpp_result_gen = Rcpp::wrap(common_atoms_cat_lognormal(nmix, ncat, a0, df0, mu_m, mu_v, b_m, b_v, nrun, burn, thin, eta1, eta2, eta_cont1, eta_cont2, st1, nu1, st2, nu2, non_na_obs1, non_na_obs1_cont, del1, del2, del_range_lognorm, nleapfrog_lognorm, alpha_hyper, del_range_alp1, nleapfrog_alp1, del_range_alp2, nleapfrog_alp2));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CAPPMx_log_sum_exp", (DL_FUNC) &_CAPPMx_log_sum_exp, 1},
    {"_CAPPMx_sanity", (DL_FUNC) &_CAPPMx_sanity, 1},
    {"_CAPPMx_mixture_cat", (DL_FUNC) &_CAPPMx_mixture_cat, 11},
    {"_CAPPMx_common_atoms_cat", (DL_FUNC) &_CAPPMx_common_atoms_cat, 20},
    {"_CAPPMx_common_atoms_cat_lognormal", (DL_FUNC) &_CAPPMx_common_atoms_cat_lognormal, 30},
    {NULL, NULL, 0}
};

RcppExport void R_init_CAPPMx(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
